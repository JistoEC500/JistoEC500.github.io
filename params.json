{"name":"Network-aware Container Distribution System","tagline":"Identifying optimizations in networking algorithms to improve network performance in a large cluster","body":"# Project Logistics\r\n- Mentor: Andrey Turovsky. Send an email to andrey-at-jisto-dot-com if you are interested in the project.\r\n- Min-max team size: 3-7\r\n- Expected project hours per week (per team member): 5-8\r\n- Will the project be open source? Initially no. Depending on where the project goes, there is some possibility of partially or fully open sourcing the project toward the end of the course, but initially team members would need to sign a confidentiality agreement. \r\n\r\n# Overview\r\nDespite advances in network hardware and software in cloud computing, network I/O can still easily become the bottleneck in large compute clusters. In a data center with regular large-scale application distribution (distribution of an application to many processing nodes), applications need the agility to be aware of the impact on the network and to react accordingly. The goal of this project is to help a start-up company implement a solution to a real world problem by developing an adaptable container deployment system, capable of monitoring the network and minimizing network congestion.\r\n\r\n# Preferred past experience\r\nThe project is fairly open-ended and the skills below are recommended, but being familiar with several of these tools and languages would definitely be helpful.\r\n- Linux (project will be done exclusively in Linux)\r\n- Bash scripting\r\n- Node.js (optionally another scripting language - python, ruby, etc.)\r\n- Docker (familiarity would be helpful, but not required)\r\n- git\r\n- OSI model implementation familiarity, especially TCP/UDP a plus\r\n\r\n# Expected progression\r\n- Implement initial simple container distribution system (design/implementation assistance will be provided) and test distribution performance in the cloud (MOC)\r\n- Create dummy applications to simulate a busy network and test simple container distribution system on a busy network\r\n- Continue improving distribution system design and testing performance\r\n\r\n# Technologies expected to be learned\r\n- Docker\r\n- Low-level Networking protocols\r\n- Node.js or another scripting language\r\n- Shell scripting","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}